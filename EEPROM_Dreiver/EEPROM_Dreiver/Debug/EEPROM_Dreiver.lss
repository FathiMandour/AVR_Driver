
EEPROM_Dreiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c78  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fc  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000050d  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h> // this header include all delay function like _delay_ms

int main(void)
{

	u8 read = EEPROM_Vid_Read(15) ;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 64 00 	call	0xc8	; 0xc8 <EEPROM_Vid_Read>
  74:	c8 2f       	mov	r28, r24



    LCD_init() ;
  76:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_init>
  7a:	01 c0       	rjmp	.+2      	; 0x7e <main+0x12>
		  LCD_write_command(0x85) ;
		LCD_write_data(read+48) ;
		EEPROM_Vid_Write(15,read) ;
		read++ ;
		_delay_ms(500) ;
		if(read==10){ read=0 ;}
  7c:	c0 e0       	ldi	r28, 0x00	; 0

    LCD_init() ;

    while (1) 
    { 
		  LCD_write_command(0x85) ;
  7e:	85 e8       	ldi	r24, 0x85	; 133
  80:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
		LCD_write_data(read+48) ;
  84:	80 e3       	ldi	r24, 0x30	; 48
  86:	8c 0f       	add	r24, r28
  88:	0e 94 14 01 	call	0x228	; 0x228 <LCD_write_data>
		EEPROM_Vid_Write(15,read) ;
  8c:	6c 2f       	mov	r22, r28
  8e:	8f e0       	ldi	r24, 0x0F	; 15
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 58 00 	call	0xb0	; 0xb0 <EEPROM_Vid_Write>
		read++ ;
  96:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e7       	ldi	r18, 0x7F	; 127
  9a:	8f e4       	ldi	r24, 0x4F	; 79
  9c:	92 e1       	ldi	r25, 0x12	; 18
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
		_delay_ms(500) ;
		if(read==10){ read=0 ;}
  aa:	ca 30       	cpi	r28, 0x0A	; 10
  ac:	41 f7       	brne	.-48     	; 0x7e <main+0x12>
  ae:	e6 cf       	rjmp	.-52     	; 0x7c <main+0x10>

000000b0 <EEPROM_Vid_Write>:


void EEPROM_Vid_Write(u16 address,u8 data) {
	
	/*  Wait until EEWE becomes zero.  */
	while(GET_BIT(EECR_REG,1)==1){}
  b0:	e1 99       	sbic	0x1c, 1	; 28
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <EEPROM_Vid_Write>
		EEAR_REG=address ; // assigned address register 
  b4:	9f bb       	out	0x1f, r25	; 31
  b6:	8e bb       	out	0x1e, r24	; 30
		EEDR_REG=data ; // assigned Data register 
  b8:	6d bb       	out	0x1d, r22	; 29
		SET_BIT(EECR_REG,2) ; // set bit to write 
  ba:	8c b3       	in	r24, 0x1c	; 28
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	8c bb       	out	0x1c, r24	; 28
		SET_BIT(EECR_REG,1) ;
  c0:	8c b3       	in	r24, 0x1c	; 28
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8c bb       	out	0x1c, r24	; 28
  c6:	08 95       	ret

000000c8 <EEPROM_Vid_Read>:
	
}
u8  EEPROM_Vid_Read (u16 address ) {
	
	/*  Wait until EEWE becomes zero.  */
	while(GET_BIT(EECR_REG,1)==1){}
  c8:	e1 99       	sbic	0x1c, 1	; 28
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <EEPROM_Vid_Read>
	EEAR_REG=address ; // assigned address register
  cc:	9f bb       	out	0x1f, r25	; 31
  ce:	8e bb       	out	0x1e, r24	; 30
      SET_BIT(EECR_REG,0) ;  // set bit to read 
  d0:	8c b3       	in	r24, 0x1c	; 28
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8c bb       	out	0x1c, r24	; 28
	  
	  return EEDR_REG ;
  d6:	8d b3       	in	r24, 0x1d	; 29
	
	
	
	
	
}
  d8:	08 95       	ret

000000da <LCD_write_command>:
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data){ // 0x53
	RS(0);
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	97 7f       	andi	r25, 0xF7	; 247
  de:	98 bb       	out	0x18, r25	; 24
	D7(GET_BIT(data,7)); // Data bit7  = D7
  e0:	88 23       	and	r24, r24
  e2:	24 f4       	brge	.+8      	; 0xec <LCD_write_command+0x12>
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	90 68       	ori	r25, 0x80	; 128
  e8:	98 bb       	out	0x18, r25	; 24
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <LCD_write_command+0x18>
  ec:	98 b3       	in	r25, 0x18	; 24
  ee:	9f 77       	andi	r25, 0x7F	; 127
  f0:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data,6)); // Data bit6  = D6
  f2:	86 ff       	sbrs	r24, 6
  f4:	04 c0       	rjmp	.+8      	; 0xfe <LCD_write_command+0x24>
  f6:	98 b3       	in	r25, 0x18	; 24
  f8:	90 64       	ori	r25, 0x40	; 64
  fa:	98 bb       	out	0x18, r25	; 24
  fc:	03 c0       	rjmp	.+6      	; 0x104 <LCD_write_command+0x2a>
  fe:	98 b3       	in	r25, 0x18	; 24
 100:	9f 7b       	andi	r25, 0xBF	; 191
 102:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data,5)); // Data bit5  = D5
 104:	85 ff       	sbrs	r24, 5
 106:	04 c0       	rjmp	.+8      	; 0x110 <LCD_write_command+0x36>
 108:	98 b3       	in	r25, 0x18	; 24
 10a:	90 62       	ori	r25, 0x20	; 32
 10c:	98 bb       	out	0x18, r25	; 24
 10e:	03 c0       	rjmp	.+6      	; 0x116 <LCD_write_command+0x3c>
 110:	98 b3       	in	r25, 0x18	; 24
 112:	9f 7d       	andi	r25, 0xDF	; 223
 114:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data,4)); // Data bit4  = D4
 116:	84 ff       	sbrs	r24, 4
 118:	04 c0       	rjmp	.+8      	; 0x122 <LCD_write_command+0x48>
 11a:	98 b3       	in	r25, 0x18	; 24
 11c:	90 61       	ori	r25, 0x10	; 16
 11e:	98 bb       	out	0x18, r25	; 24
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_write_command+0x4e>
 122:	98 b3       	in	r25, 0x18	; 24
 124:	9f 7e       	andi	r25, 0xEF	; 239
 126:	98 bb       	out	0x18, r25	; 24
	EN(1);
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	94 60       	ori	r25, 0x04	; 4
 12c:	98 bb       	out	0x18, r25	; 24
 12e:	e7 eb       	ldi	r30, 0xB7	; 183
 130:	fb e0       	ldi	r31, 0x0B	; 11
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_write_command+0x58>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_write_command+0x5e>
 138:	00 00       	nop
	_delay_ms(1);
	EN(0);
 13a:	98 b3       	in	r25, 0x18	; 24
 13c:	9b 7f       	andi	r25, 0xFB	; 251
 13e:	98 bb       	out	0x18, r25	; 24
 140:	e7 eb       	ldi	r30, 0xB7	; 183
 142:	fb e0       	ldi	r31, 0x0B	; 11
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_write_command+0x6a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_write_command+0x70>
 14a:	00 00       	nop
	_delay_ms(1);

	D7(GET_BIT(data,3)); // Data bit3  = D7
 14c:	83 ff       	sbrs	r24, 3
 14e:	04 c0       	rjmp	.+8      	; 0x158 <LCD_write_command+0x7e>
 150:	98 b3       	in	r25, 0x18	; 24
 152:	90 68       	ori	r25, 0x80	; 128
 154:	98 bb       	out	0x18, r25	; 24
 156:	03 c0       	rjmp	.+6      	; 0x15e <LCD_write_command+0x84>
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	9f 77       	andi	r25, 0x7F	; 127
 15c:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data,2)); // Data bit2  = D6
 15e:	82 ff       	sbrs	r24, 2
 160:	04 c0       	rjmp	.+8      	; 0x16a <LCD_write_command+0x90>
 162:	98 b3       	in	r25, 0x18	; 24
 164:	90 64       	ori	r25, 0x40	; 64
 166:	98 bb       	out	0x18, r25	; 24
 168:	03 c0       	rjmp	.+6      	; 0x170 <LCD_write_command+0x96>
 16a:	98 b3       	in	r25, 0x18	; 24
 16c:	9f 7b       	andi	r25, 0xBF	; 191
 16e:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data,1)); // Data bit1  = D5
 170:	81 ff       	sbrs	r24, 1
 172:	04 c0       	rjmp	.+8      	; 0x17c <LCD_write_command+0xa2>
 174:	98 b3       	in	r25, 0x18	; 24
 176:	90 62       	ori	r25, 0x20	; 32
 178:	98 bb       	out	0x18, r25	; 24
 17a:	03 c0       	rjmp	.+6      	; 0x182 <LCD_write_command+0xa8>
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9f 7d       	andi	r25, 0xDF	; 223
 180:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data,0)); // Data bit0  = D4
 182:	80 ff       	sbrs	r24, 0
 184:	04 c0       	rjmp	.+8      	; 0x18e <LCD_write_command+0xb4>
 186:	88 b3       	in	r24, 0x18	; 24
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	03 c0       	rjmp	.+6      	; 0x194 <LCD_write_command+0xba>
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	8f 7e       	andi	r24, 0xEF	; 239
 192:	88 bb       	out	0x18, r24	; 24
	EN(1);
 194:	88 b3       	in	r24, 0x18	; 24
 196:	84 60       	ori	r24, 0x04	; 4
 198:	88 bb       	out	0x18, r24	; 24
 19a:	87 eb       	ldi	r24, 0xB7	; 183
 19c:	9b e0       	ldi	r25, 0x0B	; 11
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_write_command+0xc4>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_write_command+0xca>
 1a4:	00 00       	nop
	_delay_ms(1);
	EN(0);
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	e7 eb       	ldi	r30, 0xB7	; 183
 1ae:	fb e0       	ldi	r31, 0x0B	; 11
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_write_command+0xd6>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_write_command+0xdc>
 1b6:	00 00       	nop
 1b8:	08 95       	ret

000001ba <LCD_init>:
* Purpose      : Init LCD in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PIN;
 1ba:	87 b3       	in	r24, 0x17	; 23
 1bc:	8c 6f       	ori	r24, 0xFC	; 252
 1be:	87 bb       	out	0x17, r24	; 23
	LCD_write_command(0x3);
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
 1c6:	8f ed       	ldi	r24, 0xDF	; 223
 1c8:	9e e2       	ldi	r25, 0x2E	; 46
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_init+0x10>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_init+0x16>
 1d0:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
 1d8:	8f ed       	ldi	r24, 0xDF	; 223
 1da:	9e e2       	ldi	r25, 0x2E	; 46
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_init+0x22>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_init+0x28>
 1e2:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
 1ea:	8f ed       	ldi	r24, 0xDF	; 223
 1ec:	9e e2       	ldi	r25, 0x2E	; 46
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_init+0x34>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_init+0x3a>
 1f4:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
	LCD_write_command(0x28);
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
	LCD_write_command(0x08);
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
	LCD_write_command(0x1);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
	LCD_write_command(0x6);
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
	LCD_write_command(0xC);
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	0e 94 6d 00 	call	0xda	; 0xda <LCD_write_command>
 21a:	8f e5       	ldi	r24, 0x5F	; 95
 21c:	9a ee       	ldi	r25, 0xEA	; 234
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_init+0x64>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_init+0x6a>
 224:	00 00       	nop
 226:	08 95       	ret

00000228 <LCD_write_data>:
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(uint8_t data){ // 0x53
	RS(1);
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	98 60       	ori	r25, 0x08	; 8
 22c:	98 bb       	out	0x18, r25	; 24
	D7(GET_BIT(data,7)); // Data bit7  = D7
 22e:	88 23       	and	r24, r24
 230:	24 f4       	brge	.+8      	; 0x23a <LCD_write_data+0x12>
 232:	98 b3       	in	r25, 0x18	; 24
 234:	90 68       	ori	r25, 0x80	; 128
 236:	98 bb       	out	0x18, r25	; 24
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_write_data+0x18>
 23a:	98 b3       	in	r25, 0x18	; 24
 23c:	9f 77       	andi	r25, 0x7F	; 127
 23e:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data,6)); // Data bit6  = D6
 240:	86 ff       	sbrs	r24, 6
 242:	04 c0       	rjmp	.+8      	; 0x24c <LCD_write_data+0x24>
 244:	98 b3       	in	r25, 0x18	; 24
 246:	90 64       	ori	r25, 0x40	; 64
 248:	98 bb       	out	0x18, r25	; 24
 24a:	03 c0       	rjmp	.+6      	; 0x252 <LCD_write_data+0x2a>
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	9f 7b       	andi	r25, 0xBF	; 191
 250:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data,5)); // Data bit5  = D5
 252:	85 ff       	sbrs	r24, 5
 254:	04 c0       	rjmp	.+8      	; 0x25e <LCD_write_data+0x36>
 256:	98 b3       	in	r25, 0x18	; 24
 258:	90 62       	ori	r25, 0x20	; 32
 25a:	98 bb       	out	0x18, r25	; 24
 25c:	03 c0       	rjmp	.+6      	; 0x264 <LCD_write_data+0x3c>
 25e:	98 b3       	in	r25, 0x18	; 24
 260:	9f 7d       	andi	r25, 0xDF	; 223
 262:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data,4)); // Data bit4  = D4
 264:	84 ff       	sbrs	r24, 4
 266:	04 c0       	rjmp	.+8      	; 0x270 <LCD_write_data+0x48>
 268:	98 b3       	in	r25, 0x18	; 24
 26a:	90 61       	ori	r25, 0x10	; 16
 26c:	98 bb       	out	0x18, r25	; 24
 26e:	03 c0       	rjmp	.+6      	; 0x276 <LCD_write_data+0x4e>
 270:	98 b3       	in	r25, 0x18	; 24
 272:	9f 7e       	andi	r25, 0xEF	; 239
 274:	98 bb       	out	0x18, r25	; 24
	EN(1);
 276:	98 b3       	in	r25, 0x18	; 24
 278:	94 60       	ori	r25, 0x04	; 4
 27a:	98 bb       	out	0x18, r25	; 24
 27c:	e7 eb       	ldi	r30, 0xB7	; 183
 27e:	fb e0       	ldi	r31, 0x0B	; 11
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_write_data+0x58>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_write_data+0x5e>
 286:	00 00       	nop
	_delay_ms(1);
	EN(0);
 288:	98 b3       	in	r25, 0x18	; 24
 28a:	9b 7f       	andi	r25, 0xFB	; 251
 28c:	98 bb       	out	0x18, r25	; 24
 28e:	e7 eb       	ldi	r30, 0xB7	; 183
 290:	fb e0       	ldi	r31, 0x0B	; 11
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_write_data+0x6a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_write_data+0x70>
 298:	00 00       	nop
	_delay_ms(1);

	D7(GET_BIT(data,3)); // Data bit3  = D7
 29a:	83 ff       	sbrs	r24, 3
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <LCD_write_data+0x7e>
 29e:	98 b3       	in	r25, 0x18	; 24
 2a0:	90 68       	ori	r25, 0x80	; 128
 2a2:	98 bb       	out	0x18, r25	; 24
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCD_write_data+0x84>
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	9f 77       	andi	r25, 0x7F	; 127
 2aa:	98 bb       	out	0x18, r25	; 24
	D6(GET_BIT(data,2)); // Data bit2  = D6
 2ac:	82 ff       	sbrs	r24, 2
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <LCD_write_data+0x90>
 2b0:	98 b3       	in	r25, 0x18	; 24
 2b2:	90 64       	ori	r25, 0x40	; 64
 2b4:	98 bb       	out	0x18, r25	; 24
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_write_data+0x96>
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	9f 7b       	andi	r25, 0xBF	; 191
 2bc:	98 bb       	out	0x18, r25	; 24
	D5(GET_BIT(data,1)); // Data bit1  = D5
 2be:	81 ff       	sbrs	r24, 1
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCD_write_data+0xa2>
 2c2:	98 b3       	in	r25, 0x18	; 24
 2c4:	90 62       	ori	r25, 0x20	; 32
 2c6:	98 bb       	out	0x18, r25	; 24
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <LCD_write_data+0xa8>
 2ca:	98 b3       	in	r25, 0x18	; 24
 2cc:	9f 7d       	andi	r25, 0xDF	; 223
 2ce:	98 bb       	out	0x18, r25	; 24
	D4(GET_BIT(data,0)); // Data bit0  = D4
 2d0:	80 ff       	sbrs	r24, 0
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <LCD_write_data+0xb4>
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	80 61       	ori	r24, 0x10	; 16
 2d8:	88 bb       	out	0x18, r24	; 24
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <LCD_write_data+0xba>
 2dc:	88 b3       	in	r24, 0x18	; 24
 2de:	8f 7e       	andi	r24, 0xEF	; 239
 2e0:	88 bb       	out	0x18, r24	; 24
	EN(1);
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	87 eb       	ldi	r24, 0xB7	; 183
 2ea:	9b e0       	ldi	r25, 0x0B	; 11
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_write_data+0xc4>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_write_data+0xca>
 2f2:	00 00       	nop
	_delay_ms(1);
	EN(0);
 2f4:	88 b3       	in	r24, 0x18	; 24
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	88 bb       	out	0x18, r24	; 24
 2fa:	e7 eb       	ldi	r30, 0xB7	; 183
 2fc:	fb e0       	ldi	r31, 0x0B	; 11
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_write_data+0xd6>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_write_data+0xdc>
 304:	00 00       	nop
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
