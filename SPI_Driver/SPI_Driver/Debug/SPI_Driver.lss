
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b50  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000806  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000699  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053f  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	  SPI_Master_Init() ;
  6c:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_Master_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	2f ef       	ldi	r18, 0xFF	; 255
  72:	82 e5       	ldi	r24, 0x52	; 82
  74:	97 e0       	ldi	r25, 0x07	; 7
  76:	21 50       	subi	r18, 0x01	; 1
  78:	80 40       	sbci	r24, 0x00	; 0
  7a:	90 40       	sbci	r25, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0xa>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
	   _delay_ms(200) ;
	   
	 u8 counter=0 ;
  82:	80 e0       	ldi	r24, 0x00	; 0
	//SPI_Send_string("Welcome",7) ;
	

    while (1) 
    {
		SPI_Master_TX(counter++); 
  84:	c1 e0       	ldi	r28, 0x01	; 1
  86:	c8 0f       	add	r28, r24
  88:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SPI_Master_TX>
  8c:	8c 2f       	mov	r24, r28
  8e:	fa cf       	rjmp	.-12     	; 0x84 <main+0x18>

00000090 <DIO_vid_SetPintDirection>:
/* set pin direction */
extern void DIO_vid_SetPintDirection(u8 u8port,u8 u8pin,u8  u8dir) {



	if (u8dir==OUTPUT){
  90:	4f 3f       	cpi	r20, 0xFF	; 255
  92:	a1 f5       	brne	.+104    	; 0xfc <DIO_vid_SetPintDirection+0x6c>


		switch (u8port){
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	89 f0       	breq	.+34     	; 0xba <DIO_vid_SetPintDirection+0x2a>
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_vid_SetPintDirection+0x14>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	c9 f0       	breq	.+50     	; 0xd0 <DIO_vid_SetPintDirection+0x40>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	11 f1       	breq	.+68     	; 0xe6 <DIO_vid_SetPintDirection+0x56>
  a2:	08 95       	ret

			case   DIO_u8PORTA: SET_BIT( DIO_u8DDRA_REG,u8pin) ; break ;
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_vid_SetPintDirection+0x20>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_vid_SetPintDirection+0x1c>
  b4:	82 2b       	or	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
			case   DIO_u8PORTB: SET_BIT( DIO_u8DDRB_REG,u8pin) ; break ;
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_vid_SetPintDirection+0x36>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_vid_SetPintDirection+0x32>
  ca:	82 2b       	or	r24, r18
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	08 95       	ret
			case   DIO_u8PORTC: SET_BIT( DIO_u8DDRC_REG,u8pin) ; break ;
  d0:	24 b3       	in	r18, 0x14	; 20
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vid_SetPintDirection+0x4c>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vid_SetPintDirection+0x48>
  e0:	82 2b       	or	r24, r18
  e2:	84 bb       	out	0x14, r24	; 20
  e4:	08 95       	ret
			case   DIO_u8PORTD: SET_BIT( DIO_u8DDRD_REG,u8pin) ; break ;
  e6:	21 b3       	in	r18, 0x11	; 17
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_vid_SetPintDirection+0x62>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_vid_SetPintDirection+0x5e>
  f6:	82 2b       	or	r24, r18
  f8:	81 bb       	out	0x11, r24	; 17
  fa:	08 95       	ret

			default : /* worng port */ break;
		}
	}
	else  if (u8dir == INPUT){
  fc:	41 11       	cpse	r20, r1
  fe:	37 c0       	rjmp	.+110    	; 0x16e <DIO_vid_SetPintDirection+0xde>

		switch (u8port){
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 f0       	breq	.+36     	; 0x128 <DIO_vid_SetPintDirection+0x98>
 104:	28 f0       	brcs	.+10     	; 0x110 <DIO_vid_SetPintDirection+0x80>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	d9 f0       	breq	.+54     	; 0x140 <DIO_vid_SetPintDirection+0xb0>
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	29 f1       	breq	.+74     	; 0x158 <DIO_vid_SetPintDirection+0xc8>
 10e:	08 95       	ret
			case   DIO_u8PORTA: CLR_BIT( DIO_u8DDRA_REG,u8pin) ; break ;
 110:	2a b3       	in	r18, 0x1a	; 26
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_vid_SetPintDirection+0x8c>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_vid_SetPintDirection+0x88>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	8a bb       	out	0x1a, r24	; 26
 126:	08 95       	ret
			case   DIO_u8PORTB: CLR_BIT( DIO_u8DDRB_REG,u8pin) ; break ;
 128:	27 b3       	in	r18, 0x17	; 23
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vid_SetPintDirection+0xa4>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vid_SetPintDirection+0xa0>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret
			case   DIO_u8PORTC: CLR_BIT( DIO_u8DDRC_REG,u8pin) ; break ;
 140:	24 b3       	in	r18, 0x14	; 20
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_vid_SetPintDirection+0xbc>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_vid_SetPintDirection+0xb8>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
			case   DIO_u8PORTD: CLR_BIT( DIO_u8DDRD_REG,u8pin) ; break ;
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_vid_SetPintDirection+0xd4>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_vid_SetPintDirection+0xd0>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	08 95       	ret

00000170 <SPI_Master_Init>:
	//  DIO_vid_SetPintDirection(DIO_u8PORTB,MISO_PIN,OUTPUT) ; // MAKE MISO PIN (PB6) INPUT
	DIO_vid_SetPintDirection(DIO_u8PORTB,SS_PIN,INPUT) ; // MAKE SS PIN (PB5) OUPUT
	// DIO_vid_SetPintDirection(DIO_u8PORTB,SCK_PIN,INPUT) ; // MAKE SCK PIN (PB5) OUPUT
	
	
	SET_BIT(SPCR_REG,6) ; // Enable SPI
 170:	4f ef       	ldi	r20, 0xFF	; 255
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 48 00 	call	0x90	; 0x90 <DIO_vid_SetPintDirection>
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 48 00 	call	0x90	; 0x90 <DIO_vid_SetPintDirection>
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 48 00 	call	0x90	; 0x90 <DIO_vid_SetPintDirection>
 18e:	4f ef       	ldi	r20, 0xFF	; 255
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 48 00 	call	0x90	; 0x90 <DIO_vid_SetPintDirection>
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	8d b1       	in	r24, 0x0d	; 13
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8d b9       	out	0x0d, r24	; 13
 1a4:	08 95       	ret

000001a6 <SPI_Master_TX>:
}
void SPI_Master_TX(u8 data) {
	
	SPDR_REG=data ;
 1a6:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT(SPSR_REG,7)==0){} // Wait to transmit data 
 1a8:	77 9b       	sbis	0x0e, 7	; 14
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <SPI_Master_TX+0x2>
 1ac:	2f e7       	ldi	r18, 0x7F	; 127
 1ae:	8f e4       	ldi	r24, 0x4F	; 79
 1b0:	92 e1       	ldi	r25, 0x12	; 18
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <SPI_Master_TX+0xc>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <SPI_Master_TX+0x16>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
