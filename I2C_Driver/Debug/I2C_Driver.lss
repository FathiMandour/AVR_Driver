
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d1  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d6  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	 u8 count =0 ;
   I2C_master_init() ;
  6c:	0e 94 6f 00 	call	0xde	; 0xde <I2C_master_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	2f e7       	ldi	r18, 0x7F	; 127
  72:	89 ea       	ldi	r24, 0xA9	; 169
  74:	93 e0       	ldi	r25, 0x03	; 3
  76:	21 50       	subi	r18, 0x01	; 1
  78:	80 40       	sbci	r24, 0x00	; 0
  7a:	90 40       	sbci	r25, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0xa>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
#define  F_CPU 12000000UL 
#include <util/delay.h>

int main(void)
{
	 u8 count =0 ;
  82:	c0 e0       	ldi	r28, 0x00	; 0
   I2C_master_init() ;
 _delay_ms(100) ;
   
    while (1) 
    {
		 count++ ;
  84:	cf 5f       	subi	r28, 0xFF	; 255
		  if (count%2==0){
  86:	c0 fd       	sbrc	r28, 0
  88:	15 c0       	rjmp	.+42     	; 0xb4 <main+0x48>
		  
		  I2C_master_start() ;
  8a:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_master_start>
		  I2C_master_addr(50,0) ;
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	82 e3       	ldi	r24, 0x32	; 50
  92:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_master_addr>
		  
		  I2C_master_write(count) ;
  96:	8c 2f       	mov	r24, r28
  98:	0e 94 89 00 	call	0x112	; 0x112 <I2C_master_write>
		  I2C_master_stop() ;
  9c:	0e 94 90 00 	call	0x120	; 0x120 <I2C_master_stop>
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	85 ea       	ldi	r24, 0xA5	; 165
  a4:	9e e0       	ldi	r25, 0x0E	; 14
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	e8 cf       	rjmp	.-48     	; 0x84 <main+0x18>
		  _delay_ms(400);
		  
		  }else {
			    I2C_master_start() ;
  b4:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_master_start>
			    I2C_master_addr(51,0) ;
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_master_addr>
			    
			    I2C_master_write(count) ;
  c0:	8c 2f       	mov	r24, r28
  c2:	0e 94 89 00 	call	0x112	; 0x112 <I2C_master_write>
			    I2C_master_stop() ;
  c6:	0e 94 90 00 	call	0x120	; 0x120 <I2C_master_stop>
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	85 ea       	ldi	r24, 0xA5	; 165
  ce:	9e e0       	ldi	r25, 0x0E	; 14
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
  dc:	d3 cf       	rjmp	.-90     	; 0x84 <main+0x18>

000000de <I2C_master_init>:
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	80 b9       	out	0x00, r24	; 0
  e2:	08 95       	ret

000000e4 <I2C_master_start>:
  e4:	84 ea       	ldi	r24, 0xA4	; 164
  e6:	86 bf       	out	0x36, r24	; 54
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <I2C_master_start+0x4>
  ee:	08 95       	ret

000000f0 <I2C_master_addr>:
  f0:	88 0f       	add	r24, r24
  f2:	83 b9       	out	0x03, r24	; 3
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	21 f4       	brne	.+8      	; 0x100 <I2C_master_addr+0x10>
  f8:	83 b1       	in	r24, 0x03	; 3
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	83 b9       	out	0x03, r24	; 3
  fe:	03 c0       	rjmp	.+6      	; 0x106 <I2C_master_addr+0x16>
 100:	83 b1       	in	r24, 0x03	; 3
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	83 b9       	out	0x03, r24	; 3
 106:	84 e8       	ldi	r24, 0x84	; 132
 108:	86 bf       	out	0x36, r24	; 54
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <I2C_master_addr+0x1a>
 110:	08 95       	ret

00000112 <I2C_master_write>:
 112:	83 b9       	out	0x03, r24	; 3
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	86 bf       	out	0x36, r24	; 54
 118:	06 b6       	in	r0, 0x36	; 54
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <I2C_master_write+0x6>
 11e:	08 95       	ret

00000120 <I2C_master_stop>:
 120:	84 e9       	ldi	r24, 0x94	; 148
 122:	86 bf       	out	0x36, r24	; 54
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
