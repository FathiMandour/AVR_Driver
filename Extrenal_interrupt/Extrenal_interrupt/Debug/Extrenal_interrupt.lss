
Extrenal_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083d  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043d  00000000  00000000  0000129f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003be  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	DIO_vid_SetPintDirection(DIO_u8PORTA,DIO_u8PIN0,OUTPUT) ;// make pin0 in DDRA --> output
  6c:	4f ef       	ldi	r20, 0xFF	; 255
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vid_SetPintDirection>
	DIO_vid_SetPintDirection(DIO_u8PORTD,DIO_u8PIN2,INPUT) ; // make pin2 in PORTD -- >input 
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	62 e0       	ldi	r22, 0x02	; 2
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_vid_SetPintDirection>
	
	DIO_vid_SetPintValue(DIO_u8PORTD,DIO_u8PIN2,HIGH) ; //   enable pullup resistor 
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_vid_SetPintValue>

 
 
 // enable external interrupt 0 
EXInterrupt_Vid_Config_Pin(INT0);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <EXInterrupt_Vid_Config_Pin>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x24>

00000092 <__vector_1>:
	TOGGLE_BIT(DIO_u8PORTA_REG,DIO_u8PIN0) ;
	
	
}
*/
ISR0(INT0){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	
		DIO_vid_SetPintValue(DIO_u8PORTA,DIO_u8PIN0,HIGH) ; //   ACTIVE LED IN PIN0 PORTA  
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_vid_SetPintValue>
	
	
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <DIO_vid_SetPintValue>:
/* set pin value */
extern void DIO_vid_SetPintValue(u8 u8port, u8 u8pin ,u8 u8value) {



	if (u8value==HIGH){
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	a1 f5       	brne	.+104    	; 0x14c <DIO_vid_SetPintValue+0x6c>


		switch (u8port){
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	89 f0       	breq	.+34     	; 0x10a <DIO_vid_SetPintValue+0x2a>
  e8:	28 f0       	brcs	.+10     	; 0xf4 <DIO_vid_SetPintValue+0x14>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	c9 f0       	breq	.+50     	; 0x120 <DIO_vid_SetPintValue+0x40>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	11 f1       	breq	.+68     	; 0x136 <DIO_vid_SetPintValue+0x56>
  f2:	08 95       	ret

			case   DIO_u8PORTA: SET_BIT( DIO_u8PORTA_REG,u8pin) ; break ;
  f4:	2b b3       	in	r18, 0x1b	; 27
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vid_SetPintValue+0x20>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vid_SetPintValue+0x1c>
 104:	82 2b       	or	r24, r18
 106:	8b bb       	out	0x1b, r24	; 27
 108:	08 95       	ret
			case   DIO_u8PORTB: SET_BIT( DIO_u8PORTB_REG,u8pin) ; break ;
 10a:	28 b3       	in	r18, 0x18	; 24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vid_SetPintValue+0x36>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vid_SetPintValue+0x32>
 11a:	82 2b       	or	r24, r18
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 95       	ret
			case   DIO_u8PORTC: SET_BIT( DIO_u8PORTC_REG,u8pin) ; break ;
 120:	25 b3       	in	r18, 0x15	; 21
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_vid_SetPintValue+0x4c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_vid_SetPintValue+0x48>
 130:	82 2b       	or	r24, r18
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret
			case   DIO_u8PORTD: SET_BIT( DIO_u8PORTD_REG,u8pin) ; break ;
 136:	22 b3       	in	r18, 0x12	; 18
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_vid_SetPintValue+0x62>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_vid_SetPintValue+0x5e>
 146:	82 2b       	or	r24, r18
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret

			default : /* worng port */ break;
		}
	}
	else if (u8value==LOW){
 14c:	41 11       	cpse	r20, r1
 14e:	37 c0       	rjmp	.+110    	; 0x1be <DIO_vid_SetPintValue+0xde>

		switch (u8port){
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 f0       	breq	.+36     	; 0x178 <DIO_vid_SetPintValue+0x98>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_vid_SetPintValue+0x80>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	d9 f0       	breq	.+54     	; 0x190 <DIO_vid_SetPintValue+0xb0>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	29 f1       	breq	.+74     	; 0x1a8 <DIO_vid_SetPintValue+0xc8>
 15e:	08 95       	ret
			case  DIO_u8PORTA: CLR_BIT( DIO_u8PORTA_REG,u8pin) ; break ;
 160:	2b b3       	in	r18, 0x1b	; 27
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vid_SetPintValue+0x8c>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vid_SetPintValue+0x88>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	8b bb       	out	0x1b, r24	; 27
 176:	08 95       	ret
			case   DIO_u8PORTB: CLR_BIT( DIO_u8PORTB_REG,u8pin) ; break ;
 178:	28 b3       	in	r18, 0x18	; 24
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_vid_SetPintValue+0xa4>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_vid_SetPintValue+0xa0>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	08 95       	ret
			case   DIO_u8PORTC: CLR_BIT( DIO_u8PORTC_REG,u8pin) ; break ;
 190:	25 b3       	in	r18, 0x15	; 21
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_vid_SetPintValue+0xbc>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_vid_SetPintValue+0xb8>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	08 95       	ret
			case   DIO_u8PORTD: CLR_BIT( DIO_u8PORTD_REG,u8pin) ; break ;
 1a8:	22 b3       	in	r18, 0x12	; 18
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vid_SetPintValue+0xd4>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vid_SetPintValue+0xd0>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	08 95       	ret

000001c0 <DIO_vid_SetPintDirection>:
/* set pin direction */
extern void DIO_vid_SetPintDirection(u8 u8port,u8 u8pin,u8  u8dir) {



	if (u8dir==OUTPUT){
 1c0:	4f 3f       	cpi	r20, 0xFF	; 255
 1c2:	a1 f5       	brne	.+104    	; 0x22c <DIO_vid_SetPintDirection+0x6c>


		switch (u8port){
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	89 f0       	breq	.+34     	; 0x1ea <DIO_vid_SetPintDirection+0x2a>
 1c8:	28 f0       	brcs	.+10     	; 0x1d4 <DIO_vid_SetPintDirection+0x14>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	c9 f0       	breq	.+50     	; 0x200 <DIO_vid_SetPintDirection+0x40>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	11 f1       	breq	.+68     	; 0x216 <DIO_vid_SetPintDirection+0x56>
 1d2:	08 95       	ret

			case   DIO_u8PORTA: SET_BIT( DIO_u8DDRA_REG,u8pin) ; break ;
 1d4:	2a b3       	in	r18, 0x1a	; 26
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_vid_SetPintDirection+0x20>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_vid_SetPintDirection+0x1c>
 1e4:	82 2b       	or	r24, r18
 1e6:	8a bb       	out	0x1a, r24	; 26
 1e8:	08 95       	ret
			case   DIO_u8PORTB: SET_BIT( DIO_u8DDRB_REG,u8pin) ; break ;
 1ea:	27 b3       	in	r18, 0x17	; 23
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_vid_SetPintDirection+0x36>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_vid_SetPintDirection+0x32>
 1fa:	82 2b       	or	r24, r18
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	08 95       	ret
			case   DIO_u8PORTC: SET_BIT( DIO_u8DDRC_REG,u8pin) ; break ;
 200:	24 b3       	in	r18, 0x14	; 20
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_vid_SetPintDirection+0x4c>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_vid_SetPintDirection+0x48>
 210:	82 2b       	or	r24, r18
 212:	84 bb       	out	0x14, r24	; 20
 214:	08 95       	ret
			case   DIO_u8PORTD: SET_BIT( DIO_u8DDRD_REG,u8pin) ; break ;
 216:	21 b3       	in	r18, 0x11	; 17
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_vid_SetPintDirection+0x62>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_vid_SetPintDirection+0x5e>
 226:	82 2b       	or	r24, r18
 228:	81 bb       	out	0x11, r24	; 17
 22a:	08 95       	ret

			default : /* worng port */ break;
		}
	}
	else  if (u8dir == INPUT){
 22c:	41 11       	cpse	r20, r1
 22e:	37 c0       	rjmp	.+110    	; 0x29e <DIO_vid_SetPintDirection+0xde>

		switch (u8port){
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	91 f0       	breq	.+36     	; 0x258 <DIO_vid_SetPintDirection+0x98>
 234:	28 f0       	brcs	.+10     	; 0x240 <DIO_vid_SetPintDirection+0x80>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	d9 f0       	breq	.+54     	; 0x270 <DIO_vid_SetPintDirection+0xb0>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	29 f1       	breq	.+74     	; 0x288 <DIO_vid_SetPintDirection+0xc8>
 23e:	08 95       	ret
			case   DIO_u8PORTA: CLR_BIT( DIO_u8DDRA_REG,u8pin) ; break ;
 240:	2a b3       	in	r18, 0x1a	; 26
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vid_SetPintDirection+0x8c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vid_SetPintDirection+0x88>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	8a bb       	out	0x1a, r24	; 26
 256:	08 95       	ret
			case   DIO_u8PORTB: CLR_BIT( DIO_u8DDRB_REG,u8pin) ; break ;
 258:	27 b3       	in	r18, 0x17	; 23
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_vid_SetPintDirection+0xa4>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_vid_SetPintDirection+0xa0>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
			case   DIO_u8PORTC: CLR_BIT( DIO_u8DDRC_REG,u8pin) ; break ;
 270:	24 b3       	in	r18, 0x14	; 20
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_vid_SetPintDirection+0xbc>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_vid_SetPintDirection+0xb8>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	84 bb       	out	0x14, r24	; 20
 286:	08 95       	ret
			case   DIO_u8PORTD: CLR_BIT( DIO_u8DDRD_REG,u8pin) ; break ;
 288:	21 b3       	in	r18, 0x11	; 17
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vid_SetPintDirection+0xd4>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vid_SetPintDirection+0xd0>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	81 bb       	out	0x11, r24	; 17
 29e:	08 95       	ret

000002a0 <EXInterrupt_Vid_Config_Pin>:
#include "../header_files/External_Interrupt_Prog.h"
#include "../header_files/External_Interrupt_Privte.h"
void EXInterrupt_Vid_Config_Pin( u8 u8pin) {
	
	
	switch(u8pin){
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	89 f0       	breq	.+34     	; 0x2c6 <EXInterrupt_Vid_Config_Pin+0x26>
 2a4:	18 f0       	brcs	.+6      	; 0x2ac <EXInterrupt_Vid_Config_Pin+0xc>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	d9 f0       	breq	.+54     	; 0x2e0 <EXInterrupt_Vid_Config_Pin+0x40>
 2aa:	08 95       	ret
		
		 case INT0:    
		               SET_BIT(EXIN_U8_SREG_REG,7) ; // enable global interrupt 
 2ac:	8f b7       	in	r24, 0x3f	; 63
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	8f bf       	out	0x3f, r24	; 63
					   SET_BIT(EXIN_U8_GICR_REG,6) ; // enable External interrut0
 2b2:	8b b7       	in	r24, 0x3b	; 59
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	8b bf       	out	0x3b, r24	; 59
					          /* rising edge */
						SET_BIT(EXIN_U8_MCUCR_REG,0) ;	  
 2b8:	85 b7       	in	r24, 0x35	; 53
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	85 bf       	out	0x35, r24	; 53
						SET_BIT(EXIN_U8_MCUCR_REG,1) ;	
 2be:	85 b7       	in	r24, 0x35	; 53
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	85 bf       	out	0x35, r24	; 53
						            break ;	  
 2c4:	08 95       	ret
	   case INT1:
					  SET_BIT(EXIN_U8_SREG_REG,7) ; // enable global interrupt
 2c6:	8f b7       	in	r24, 0x3f	; 63
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	8f bf       	out	0x3f, r24	; 63
					  SET_BIT(EXIN_U8_GICR_REG,7) ; // enable External interrut1
 2cc:	8b b7       	in	r24, 0x3b	; 59
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8b bf       	out	0x3b, r24	; 59
					  /* rising edge */
					  SET_BIT(EXIN_U8_MCUCR_REG,0) ;
 2d2:	85 b7       	in	r24, 0x35	; 53
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	85 bf       	out	0x35, r24	; 53
					  SET_BIT(EXIN_U8_MCUCR_REG,1) ;
 2d8:	85 b7       	in	r24, 0x35	; 53
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	85 bf       	out	0x35, r24	; 53
					  break ;
 2de:	08 95       	ret
	 case INT2:
					  SET_BIT(EXIN_U8_SREG_REG,7) ; // enable global interrupt
 2e0:	8f b7       	in	r24, 0x3f	; 63
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	8f bf       	out	0x3f, r24	; 63
					  SET_BIT(EXIN_U8_GICR_REG,5) ; // enable External interrut0
 2e6:	8b b7       	in	r24, 0x3b	; 59
 2e8:	80 62       	ori	r24, 0x20	; 32
 2ea:	8b bf       	out	0x3b, r24	; 59
					  /* rising edge */
					  SET_BIT(EXIN_U8_MCUCSR_REG,6);
 2ec:	84 b7       	in	r24, 0x34	; 52
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	84 bf       	out	0x34, r24	; 52
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
