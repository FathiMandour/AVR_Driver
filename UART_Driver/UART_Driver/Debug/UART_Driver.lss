
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089e  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000684  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032d  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 12000000UL


int main(void)
{
	  DIO_vid_SetPintDirection(DIO_u8PORTD,DIO_u8PIN1,OUTPUT) ;
  6c:	4f ef       	ldi	r20, 0xFF	; 255
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vid_SetPintDirection>
	  
	    UART_Init() ;
  76:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Init>
	    UART_TX('a') ;
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	0e 94 ba 00 	call	0x174	; 0x174 <UART_TX>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <DIO_vid_SetPintDirection>:
/* set pin direction */
extern void DIO_vid_SetPintDirection(u8 u8port,u8 u8pin,u8  u8dir) {



	if (u8dir==OUTPUT){
  82:	4f 3f       	cpi	r20, 0xFF	; 255
  84:	a1 f5       	brne	.+104    	; 0xee <DIO_vid_SetPintDirection+0x6c>


		switch (u8port){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_vid_SetPintDirection+0x2a>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_vid_SetPintDirection+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_vid_SetPintDirection+0x40>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_vid_SetPintDirection+0x56>
  94:	08 95       	ret

			case   DIO_u8PORTA: SET_BIT( DIO_u8DDRA_REG,u8pin) ; break ;
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_vid_SetPintDirection+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_vid_SetPintDirection+0x1c>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
			case   DIO_u8PORTB: SET_BIT( DIO_u8DDRB_REG,u8pin) ; break ;
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_vid_SetPintDirection+0x36>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_vid_SetPintDirection+0x32>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
			case   DIO_u8PORTC: SET_BIT( DIO_u8DDRC_REG,u8pin) ; break ;
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_vid_SetPintDirection+0x4c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_vid_SetPintDirection+0x48>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
			case   DIO_u8PORTD: SET_BIT( DIO_u8DDRD_REG,u8pin) ; break ;
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_vid_SetPintDirection+0x62>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_vid_SetPintDirection+0x5e>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret

			default : /* worng port */ break;
		}
	}
	else  if (u8dir == INPUT){
  ee:	41 11       	cpse	r20, r1
  f0:	37 c0       	rjmp	.+110    	; 0x160 <DIO_vid_SetPintDirection+0xde>

		switch (u8port){
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <DIO_vid_SetPintDirection+0x98>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_vid_SetPintDirection+0x80>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <DIO_vid_SetPintDirection+0xb0>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	29 f1       	breq	.+74     	; 0x14a <DIO_vid_SetPintDirection+0xc8>
 100:	08 95       	ret
			case   DIO_u8PORTA: CLR_BIT( DIO_u8DDRA_REG,u8pin) ; break ;
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vid_SetPintDirection+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vid_SetPintDirection+0x88>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	8a bb       	out	0x1a, r24	; 26
 118:	08 95       	ret
			case   DIO_u8PORTB: CLR_BIT( DIO_u8DDRB_REG,u8pin) ; break ;
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_vid_SetPintDirection+0xa4>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_vid_SetPintDirection+0xa0>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
			case   DIO_u8PORTC: CLR_BIT( DIO_u8DDRC_REG,u8pin) ; break ;
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_vid_SetPintDirection+0xbc>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_vid_SetPintDirection+0xb8>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	84 bb       	out	0x14, r24	; 20
 148:	08 95       	ret
			case   DIO_u8PORTD: CLR_BIT( DIO_u8DDRD_REG,u8pin) ; break ;
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vid_SetPintDirection+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vid_SetPintDirection+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <UART_Init>:
* Parameters   : void
* Return value : void
*****************************************************************************/
void UART_Init() {
	
	UBRRL_REG=78.125 ; // // baud rate 9600, F_CPU = 8Mhz
 162:	8e e4       	ldi	r24, 0x4E	; 78
 164:	89 b9       	out	0x09, r24	; 9
	
	SET_BIT(USCRB_REG,4) ; // Enable RX 
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(USCRB_REG,3) ; // Enable TX 
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	8a b9       	out	0x0a, r24	; 10
 172:	08 95       	ret

00000174 <UART_TX>:
*****************************************************************************/
void UART_TX(u8 data){
	
	
	/* Put data into buffer, sends the data */
	      UDR_REG=data ;
 174:	8c b9       	out	0x0c, r24	; 12
		  
	while(GET_BIT(UCSRA_REG,6)==0) ;
 176:	5e 9b       	sbis	0x0b, 6	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <UART_TX+0x2>
	
	
	
	
}
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
